<!-- ---
export const prerender = false;

import Layout from "../layouts/Layout.astro";
import Hero from "../../sections/Hero.astro";
import ProductLayout from "../../sections/ProductsLayaout";
import { mockData3 } from "../../data/MockData";

const url = new URL(Astro.request.url);
const slug = url.pathname.split("/")[1] || "default";

console.log("slug:", slug);

let storeData = null;
let error = null;

try {
    const res = await fetch(`https://showby.marcospd.ninja/catalog/${slug}`);
    if (!res.ok) {
        throw new Error("No se encontró la tienda");
    }
    storeData = await res.json();
    console.log("Respuesta de la API:", storeData);
} catch (err) {
    console.error(err);
    error = err;
}

// ✅ Solo si storeData existe armamos enrichedProducts
const enrichedProducts = storeData
    ? {
          buttonColor: "bg-green-500",
          priceColor: "text-green-600",
          items: (storeData.categories ?? []).flatMap((category) =>
              (category.products ?? []).map((product) => ({
                  ...product,
                  categoryId: category.name,
              })),
          ),
      }
    : {
          buttonColor: "",
          priceColor: "",
          items: [],
      };

const { header, hero, products } = mockData3;
---

<Layout
    description="Tienda Online"
    title={storeData?.name ?? "Tienda"}
    canonical="./favicon.svg"
>
    {
        error || !storeData ? (
            <div class="text-center p-10 text-red-500">
                No se encontró la tienda o hubo un error.
            </div>
        ) : (
            <>
                <Hero
                    logoUrl={storeData.logoUrl ?? "./bg-imagen.webp"}
                    name={storeData.name ?? "Tienda"}
                    description={storeData.description ?? ""}
                />

                <ProductLayout
                    client:load
                    header={{
                        storeName: storeData.name ?? "Tienda",
                        logoUrl: storeData.logoUrl ?? "",
                        categories: [
                            "Todos los productos",
                            ...(storeData.categories ?? []).map(
                                (c) => c.name ?? "",
                            ),
                        ],
                        selectStyle: "bg-green-500 text-white",
                    }}
                    products={enrichedProducts}
                />
            </>
        )
    }
</Layout> -->
